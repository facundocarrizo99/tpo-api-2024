//Funcion para el update del back teniendo en cuenta la foto que tiene cada usuario. Seguro hay que modificar la base de datos para que pueda almacenar una foto de perfil.
const bcrypt = require('bcryptjs');
const User = require('../models/User');  // Asegúrate de importar correctamente tu modelo de usuario

exports.updateUser = async function (user) {
    try {
        // Encontrar el usuario por su ID (o email si prefieres)
        const oldUser = await User.findById(user.id);
        console.log(oldUser);

        // Si no existe el usuario, lanzar un error
        if (!oldUser) {
            return { error: "Usuario no encontrado" };
        }

        // Verifica si se proporcionó una nueva contraseña
        if (user.password) {
            const hashedPassword = bcrypt.hashSync(user.password, 8);
            oldUser.password = hashedPassword;
        }

        // Actualizar el resto de los campos
        oldUser.name = user.name;
        oldUser.email = user.email;

        // Si se subió una nueva imagen de perfil, actualizarla
        if (user.profileImage) {
            oldUser.profileImage = user.profileImage; // Puedes guardar la URL de la imagen aquí
        }

        // Guardar los cambios
        const savedUser = await oldUser.save();
        return savedUser;
        
    } catch (e) {
        console.error(e);
        throw Error("Error occurred while updating the user");
    }
};

//Si estás usando multer para manejar la subida de imágenes en el backend, deberías agregar una configuración como esta:

const multer = require('multer');
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/profile_images');
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + '-' + file.originalname);
    },
});

const upload = multer({ storage }).single('profileImage');

//En el controlador, usa upload para manejar la imagen antes de actualizar el usuario:

app.put('/api/users/update', upload, async (req, res) => {
    try {
        const updatedUser = await updateUser({
            id: req.body.id,
            name: req.body.name,
            surname: req.body.surname,
            email: req.body.email,
            password: req.body.password,
            profileImage: req.file ? req.file.path : undefined, // Solo si hay archivo
        });
        res.status(200).json(updatedUser);
    } catch (e) {
        res.status(500).json({ error: e.message });
    }
});


// Convertir el body a formato URL-encoded
const body = new URLSearchParams({
    email: email,
    password: password
  }).toString();
  console.log("Request Body:", body); // Ver el cuerpo de la solicitud en formato URL-encoded

  try {
    const response = await fetch('http://localhost:3000/api/users/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded', // Cambiar el tipo de contenido
      },
      body: body, // Usar el cuerpo codificado en formato URL
    });

    if (!response.ok) {
      if (response.status === 400) {
        alert('Credenciales incorrectas. Por favor, inténtalo de nuevo.');
      } else {
        alert('Error en el servidor. Intenta más tarde.');
      }
      return;
    }

    // Parsear la respuesta del backend
    const data = await response.json();

    // Guardar el token en sessionStorage
    console.log("Guardo el token en session storage");
    sessionStorage.setItem("access-token", data.token);

    // Redirigir al usuario a la página principal
    navigate('/Home');
  } catch (error) {
    console.error('Error durante el inicio de sesión:', error);
    alert('Error al conectar con el servidor.');
  }
};





//Funcion Update
    const handleSave = async () => {
        try {
            const formData = new FormData();
            formData.append('id', userData.id);
            formData.append('name', name);
            formData.append('surname', surname);
            formData.append('email', email);
            formData.append('password', password);
            if (profileImage) {
                formData.append('profileImage', profileImage);  // Agregar la imagen si se cambió
            }

            // Hacer la solicitud al backend para actualizar el usuario
            const response = await axios.put('/api/users/update', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',  // Importante cuando se envían archivos
                },
            });

            console.log('Usuario actualizado:', response.data);
            onClose();  // Cerrar el modal después de guardar
        } catch (error) {
            console.error('Error al actualizar el perfil:', error);
        }
    };

    const handleDeleteProfile = async () => {
        if (window.confirm("¿Estás seguro de que quieres eliminar tu perfil? Esta acción no se puede deshacer.")) {
            try {
                const response = await axios.delete(`/api/users/delete/${userData.id}`);
                console.log('Perfil eliminado:', response.data);
                onClose();  // Cerrar el modal después de eliminar
            } catch (error) {
                console.error('Error al eliminar el perfil:', error);
            }
        }
    };


